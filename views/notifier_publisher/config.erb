<%
  inst = instance rescue nil
  inst = inst.getTarget if inst.respond_to?(:getTarget)

  f = taglib("/lib/form")
  f.block do
%>

<table style="margin-left: 30px;">
<%
  f.entry :title => 'Server',
          :field => :server,
          :description => 'IRC Server' do
    f.textbox :clazz => 'required', :default => 'localhost'
  end

  f.entry :title => 'Port',
          :field => :port,
          :description => 'IRC Port' do
    f.textbox :clazz => 'required', :default => '6667'
  end

  f.entry :title => 'User',
          :field => :user,
          :description => 'IRC User' do
    f.textbox :clazz => 'required'
  end

  f.entry :title => 'Channel',
          :field => :channel,
          :description => 'IRC Channel' do
            f.textbox :clazz => 'required'
  end

  f.entry :title => "Messages",
          :fiels => :messages do
    f.repeatable :field => "messages",
                 :minimum => 1 do |x|
%>
  <table width="100%">

    <% f.entry :title => "Trigger",
               :field => :trigger do %>
      <select name="trigger">
        <% f.option :value => "stable",   :selected => ((inst ? inst.class.message(inst, :key => 'trigger') : nil) == "stable").to_s do %>Stable<% end %>
        <% f.option :value => "unstable", :selected => ((inst ? inst.class.message(inst, :key => 'trigger') : nil) == "unstable").to_s do %>Unstable<% end %>
        <% f.option :value => "stable_or_unstable", :selected => ((inst ? inst.class.message(inst, :key => 'trigger') : nil) == "stable_or_unstable").to_s do %>Stable or unstable but not failed<% end %>
        <% f.option :value => "unstable_or_failed", :selected => ((inst ? inst.class.message(inst, :key => 'trigger') : nil) == "unstable_or_failed").to_s do %>Unstable or failed but not stable<% end %>
        <% f.option :value => "failed",   :selected => ((inst ? inst.class.message(inst, :key => 'trigger') : nil) == "failed").to_s do %>Failed<% end %>
        <% f.option :value => "complete", :selected => ((inst ? inst.class.message(inst, :key => 'trigger') : nil) == "complete").to_s do %>Complete<% end %>
      </select>
    <% end %>
<%
    f.entry :title => 'Message',
            :field => :message,
            :description => 'IRC Message' do
              f.textarea :clazz => 'required', :value => inst ? inst.class.message(inst, :with_next => true, :key => 'message') : nil
            end

    f.entry do
      f.repeatableDeleteButton
    end
%>
  </table>
<%
    end
  end
%>
</table>

<%
  end
%>
